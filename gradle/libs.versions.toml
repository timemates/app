[versions]
# Kotlin
kotlin = "1.9.22"
kotlinx-coroutines = "1.8.0"
kotlinx-serialization = "1.6.3"

# Libraries
ktor = "2.3.8"

# Testing
jupiter = "5.8.2"
junit = "4.13.2"
androidx-test-ext-junit = "1.1.5"
espresso-core = "3.5.1"

# UI
androidGradlePlugin = "8.2.2"
androidComposeVersion = "2.6.2"
jetpackComposeCompilerVersion = "1.5.6"
jetbrainsCompose = "1.6.0"
material = "1.11.0"

timeMatesSdk = "dev-2e6f1991053b561042f0f4ff10b82592f46137fb"

ksp = "1.9.22-1.0.17"
flowmvi = "2.5.0-alpha02"


# Koin
koin = "3.5.3"
koin-annotations = "1.3.1"

decompose = "2.2.2"
sqldelight = "2.0.1"
moko-resources = "0.23.0"
core-ktx = "1.12.0"
credentials = "1.0.1"
securityCryptoKtx = "1.1.0-alpha06"

# Build constants
android-target = "34"
android-min = "24"

[libraries]
# KotlinX libraries
kotlinx-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-swing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }
kotlinx-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.require = "0.5.0" }
kotlinx-immutable = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version.require = "0.3.7" }

# Ktor
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-server-call-logging = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktor" }
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-server-statusPages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }

ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }

# Logging
logback-classic = { module = "ch.qos.logback:logback-classic", version.require = "1.3.5" }

# Cache4k
cache4k = { module = "io.github.reactivecircus.cache4k:cache4k", version.require="0.9.0" }

# AndroidX Compose
androidx-compose-ui = { module = "androidx.compose.ui:ui", version.ref = "androidComposeVersion" }
androidx-compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "androidComposeVersion" }
androidx-compose-material3 = { module = "androidx.compose.material3:material3", version.require = "1.2.0" }
androidx-compose-icons = { module = "androidx.compose.material:material-icons-core", version.ref = "androidComposeVersion" }
androidx-compose-extendedIcons = { module = "androidx.compose.material:material-icons-extended", version.ref = "androidComposeVersion" }
androidx-compose-activity = { module = "androidx.activity:activity-compose", version.require = "1.8.2" }
androidx-compose-viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.require = "2.7.0" }
androidx-compose-tooling = { module = "androidx.compose.ui:ui-tooling", version.require = "1.6.2" }
androidx-compose-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.require = "1.6.2" }

compose-accompanist-systemUiController = { module = "com.google.accompanist:accompanist-systemuicontroller", version.require = "0.31.6-rc" }

# AndroidX (other)
androidx-security-crypto-ktx = { module = "androidx.security:security-crypto-ktx", version.ref = "securityCryptoKtx" }
androidx-lifecycle = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.require = "2.7.0" }
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.require = "1.7.0-alpha03" }

# TimeMates SDK
timemates-sdk = { module = "org.timemates.sdk:sdk", version.ref = "timeMatesSdk" }
timemates-engine-rsocket = { module = "org.timemates.sdk:rsocket-engine", version.ref = "timeMatesSdk" }
timemates-credentials-manager = { module = "org.timemates.credentials:credentials-manager", version.ref = "credentials" }
timemates-credentials-manager-android = { module = "org.timemates.credentials:credentials-manager-android", version.ref = "credentials" }

# Koin
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-annotations = { module = "io.insert-koin:koin-annotations", version.ref = "koin-annotations" }
koin-ksp-compiler = { module = "io.insert-koin:koin-ksp-compiler", version.ref = "koin-annotations" }

# Decompose
decompose = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
decompose-jetbrains-compose = { module = "com.arkivanov.decompose:extensions-compose-jetbrains", version.ref = "decompose" }
koin-androidx-compose = { module = "io.insert-koin:koin-androidx-compose", version.require = "3.4.5" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
koin-compose = { module = "io.insert-koin:koin-compose", version.require = "1.0.3" }

# Kotlin Plugin
kotlin-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }

# Android Gradle Plugin
android-gradle-plugin = { module = "com.android.tools.build:gradle", version.ref = "androidGradlePlugin" }

# Compose Multiplatform Plugin
compose-multiplatform-plugin = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "jetbrainsCompose" }

# KSP Plugin
ksp-plugin = { module = "com.google.devtools.ksp:symbol-processing-gradle-plugin", version.ref = "ksp" }

# Moko Resources
moko-resources = { module = "dev.icerock.moko:resources", version.ref = "moko-resources" }
moko-resources-compose = { module = "dev.icerock.moko:resources-compose", version.ref = "moko-resources" }

# SQLDelight
sqldelight-jvm-driver = { module = "app.cash.sqldelight:sqlite-driver", version.require = "2.0.0-rc02" }
sqldelight-android-driver = { module = "app.cash.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelight-runtime = { module = "app.cash.sqldelight:runtime", version.ref = "sqldelight" }

# Android Multidex
android-multidex = { module = "androidx.multidex:multidex", version.require = "2.0.1" }

# Core KTX
core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "core-ktx" }

# JUnit
junit = { group = "junit", name = "junit", version.ref = "junit" }

# Testing
junit-kotlin = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "jupiter" }
androidx-test-ext-junit = { group = "androidx.test.ext", name = "junit", version.ref = "androidx-test-ext-junit" }
espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espresso-core" }
mockk = { group = "io.mockk", name = "mockk", version.require = "1.13.5" }

# FlowMVI
flowmvi-core = { module = "pro.respawn.flowmvi:core", version.ref = "flowmvi" }
# Test DSL
flowmvi-test = { module = "pro.respawn.flowmvi:test", version.ref = "flowmvi" }
# Compose multiplatform
flowmvi-compose = { module = "pro.respawn.flowmvi:compose", version.ref = "flowmvi" }
# Common android
flowmvi-android = { module = "pro.respawn.flowmvi:android", version.ref = "flowmvi" }
# View-based android
flowmvi-view = { module = "pro.respawn.flowmvi:android-view", version.ref = "flowmvi" }
# Multiplatform state preservation
flowmvi-savedstate = { module = "pro.respawn.flowmvi:savedstate", version.ref = "flowmvi" }
# Remote debugging client
flowmvi-debugger-client = { module = "pro.respawn.flowmvi:debugger-plugin", version.ref = "flowmvi" }
# Essenty (Decompose) integration
flowmvi-essenty = { module = "pro.respawn.flowmvi:essenty", version.ref = "flowmvi" }
flowmvi-essenty-compose = { module = "pro.respawn.flowmvi:essenty-compose", version.ref = "flowmvi" }

# Material
material = { group = "com.google.android.material", name = "material", version.ref = "material" }

# Compose resources
libres-compose = { module = "io.github.skeptick.libres:libres-compose", version.require = "1.2.2" }

[plugins]
# Build conventions
configurations-multiplatform-library = { id = "multiplatform-library-convention", version.require = "SNAPSHOT" }
configurations-compose-multiplatform = { id = "compose-multiplatform-convention", version.require = "SNAPSHOT" }
configurations-koin-annotations = { id = "koin-dependencies-convention", version.require = "SNAPSHOT" }
configurations-unit-tests = { id = "unit-tests-convention", version.require = "SNAPSHOT" }
configurations-unit-tests-mockable = { id = "unit-tests-with-mockk-convention", version.require = "SNAPSHOT" }
configurations-jvm-library = { id = "jvm-library-convention", version.require = "SNAPSHOT" }

# Serialization Plugin
kotlinx-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }

# JVM Plugin
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }

# Multiplatform Plugin
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }

# JS Plugin
kotlin-js = { id = "org.jetbrains.kotlin.js", version.ref = "kotlin" }

# Android Plugin
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }

# Android Library Plugin
android-library = { id = "com.android.library", version.ref = "androidGradlePlugin" }

# Android Application Plugin
android-application = { id = "com.android.library", version.ref = "androidGradlePlugin" }

# Compose Multiplatform Plugin
compose-multiplatform = { id = "org.jetbrains.compose", version.ref = "jetbrainsCompose" }

# Code-generation
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
kotlin-parcelize = { id = "org.jetbrains.kotlin.plugin.parcelize", version.ref = "kotlin" }
cashapp-sqldelight = { id = "app.cash.sqldelight", version.ref = "sqldelight" }
libres = { id = "io.github.skeptick.libres", version.require = "1.2.2" }
